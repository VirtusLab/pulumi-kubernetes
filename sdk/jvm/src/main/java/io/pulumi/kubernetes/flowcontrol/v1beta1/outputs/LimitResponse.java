// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.flowcontrol.v1beta1.outputs;

import javax.annotation.Nullable;
import java.util.Objects;
import java.util.Optional;
import java.util.Map;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import io.pulumi.core.*;
import io.pulumi.core.internal.annotations.*;
import io.pulumi.kubernetes.Utilities;

@OutputCustomType
public final class LimitResponse {
    private final @Nullable io.pulumi.kubernetes.flowcontrol.v1beta1.outputs.QueuingConfiguration queuing;
    private final String type;

    @OutputCustomType.Constructor({"queuing","type"})
    private LimitResponse(
        @Nullable io.pulumi.kubernetes.flowcontrol.v1beta1.outputs.QueuingConfiguration queuing,
        String type) {
        this.queuing = queuing;
        this.type = Objects.requireNonNull(type);
    }

    public Optional<io.pulumi.kubernetes.flowcontrol.v1beta1.outputs.QueuingConfiguration> getQueuing() {
        return Optional.ofNullable(this.queuing);
    }
    public String getType() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LimitResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable io.pulumi.kubernetes.flowcontrol.v1beta1.outputs.QueuingConfiguration queuing;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(LimitResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.queuing = defaults.queuing;
    	      this.type = defaults.type;
        }

        public Builder setQueuing(@Nullable io.pulumi.kubernetes.flowcontrol.v1beta1.outputs.QueuingConfiguration queuing) {
            this.queuing = queuing;
            return this;
        }

        public Builder setType(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public LimitResponse build() {
            return new LimitResponse(queuing, type);
        }
    }
}
