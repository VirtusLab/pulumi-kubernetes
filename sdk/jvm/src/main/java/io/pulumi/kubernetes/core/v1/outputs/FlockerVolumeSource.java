// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core.v1.outputs;

import javax.annotation.Nullable;
import java.util.Objects;
import java.util.Optional;
import java.util.Map;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import io.pulumi.core.*;
import io.pulumi.core.internal.annotations.*;
import io.pulumi.kubernetes.Utilities;

@OutputCustomType
public final class FlockerVolumeSource {
    private final @Nullable String datasetName;
    private final @Nullable String datasetUUID;

    @OutputCustomType.Constructor({"datasetName","datasetUUID"})
    private FlockerVolumeSource(
        @Nullable String datasetName,
        @Nullable String datasetUUID) {
        this.datasetName = datasetName;
        this.datasetUUID = datasetUUID;
    }

    public Optional<String> getDatasetName() {
        return Optional.ofNullable(this.datasetName);
    }
    public Optional<String> getDatasetUUID() {
        return Optional.ofNullable(this.datasetUUID);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlockerVolumeSource defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String datasetName;
        private @Nullable String datasetUUID;

        public Builder() {
    	      // Empty
        }

        public Builder(FlockerVolumeSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datasetName = defaults.datasetName;
    	      this.datasetUUID = defaults.datasetUUID;
        }

        public Builder setDatasetName(@Nullable String datasetName) {
            this.datasetName = datasetName;
            return this;
        }

        public Builder setDatasetUUID(@Nullable String datasetUUID) {
            this.datasetUUID = datasetUUID;
            return this;
        }

        public FlockerVolumeSource build() {
            return new FlockerVolumeSource(datasetName, datasetUUID);
        }
    }
}
