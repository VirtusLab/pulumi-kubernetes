// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.inputs;

import javax.annotation.Nullable;
import java.util.Objects;
import java.util.Optional;
import java.util.Map;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import io.pulumi.core.*;
import io.pulumi.core.internal.annotations.*;
import io.pulumi.kubernetes.Utilities;


public final class ProviderArgs extends io.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    @InputImport(name="cluster")
    private final @Nullable Input<String> cluster;

    public Input<String> getCluster() {
        return this.cluster == null ? Input.empty() : this.cluster;
    }

    @InputImport(name="context")
    private final @Nullable Input<String> context;

    public Input<String> getContext() {
        return this.context == null ? Input.empty() : this.context;
    }

    @InputImport(name="enableDryRun", json=true)
    private final @Nullable Input<Boolean> enableDryRun;

    public Input<Boolean> getEnableDryRun() {
        return this.enableDryRun == null ? Input.empty() : this.enableDryRun;
    }

    @InputImport(name="kubeconfig")
    private final @Nullable Input<String> kubeconfig;

    public Input<String> getKubeconfig() {
        return this.kubeconfig == null ? Input.empty() : this.kubeconfig;
    }

    @InputImport(name="namespace")
    private final @Nullable Input<String> namespace;

    public Input<String> getNamespace() {
        return this.namespace == null ? Input.empty() : this.namespace;
    }

    @InputImport(name="renderYamlToDirectory")
    private final @Nullable Input<String> renderYamlToDirectory;

    public Input<String> getRenderYamlToDirectory() {
        return this.renderYamlToDirectory == null ? Input.empty() : this.renderYamlToDirectory;
    }

    @InputImport(name="suppressDeprecationWarnings", json=true)
    private final @Nullable Input<Boolean> suppressDeprecationWarnings;

    public Input<Boolean> getSuppressDeprecationWarnings() {
        return this.suppressDeprecationWarnings == null ? Input.empty() : this.suppressDeprecationWarnings;
    }

    public ProviderArgs(
        @Nullable Input<String> cluster,
        @Nullable Input<String> context,
        @Nullable Input<Boolean> enableDryRun,
        @Nullable Input<String> kubeconfig,
        @Nullable Input<String> namespace,
        @Nullable Input<String> renderYamlToDirectory,
        @Nullable Input<Boolean> suppressDeprecationWarnings) {
        this.cluster = cluster;
        this.context = context;
        this.enableDryRun = enableDryRun == null ? Input.ofNullable(Utilities.getEnvBoolean("PULUMI_K8S_ENABLE_DRY_RUN").orElse(null)) : enableDryRun;
        this.kubeconfig = kubeconfig == null ? Input.ofNullable(Utilities.getEnv("KUBECONFIG").orElse(null)) : kubeconfig;
        this.namespace = namespace;
        this.renderYamlToDirectory = renderYamlToDirectory;
        this.suppressDeprecationWarnings = suppressDeprecationWarnings == null ? Input.ofNullable(Utilities.getEnvBoolean("PULUMI_K8S_SUPPRESS_DEPRECATION_WARNINGS").orElse(null)) : suppressDeprecationWarnings;
    }

    private ProviderArgs() {
        this.cluster = Input.empty();
        this.context = Input.empty();
        this.enableDryRun = Input.empty();
        this.kubeconfig = Input.empty();
        this.namespace = Input.empty();
        this.renderYamlToDirectory = Input.empty();
        this.suppressDeprecationWarnings = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> cluster;
        private @Nullable Input<String> context;
        private @Nullable Input<Boolean> enableDryRun;
        private @Nullable Input<String> kubeconfig;
        private @Nullable Input<String> namespace;
        private @Nullable Input<String> renderYamlToDirectory;
        private @Nullable Input<Boolean> suppressDeprecationWarnings;

        public Builder() {
    	      // Empty
        }

        public Builder(ProviderArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cluster = defaults.cluster;
    	      this.context = defaults.context;
    	      this.enableDryRun = defaults.enableDryRun;
    	      this.kubeconfig = defaults.kubeconfig;
    	      this.namespace = defaults.namespace;
    	      this.renderYamlToDirectory = defaults.renderYamlToDirectory;
    	      this.suppressDeprecationWarnings = defaults.suppressDeprecationWarnings;
        }

        public Builder setCluster(@Nullable Input<String> cluster) {
            this.cluster = cluster;
            return this;
        }

        public Builder setCluster(@Nullable String cluster) {
            this.cluster = Input.ofNullable(cluster);
            return this;
        }

        public Builder setContext(@Nullable Input<String> context) {
            this.context = context;
            return this;
        }

        public Builder setContext(@Nullable String context) {
            this.context = Input.ofNullable(context);
            return this;
        }

        public Builder setEnableDryRun(@Nullable Input<Boolean> enableDryRun) {
            this.enableDryRun = enableDryRun;
            return this;
        }

        public Builder setEnableDryRun(@Nullable Boolean enableDryRun) {
            this.enableDryRun = Input.ofNullable(enableDryRun);
            return this;
        }

        public Builder setKubeconfig(@Nullable Input<String> kubeconfig) {
            this.kubeconfig = kubeconfig;
            return this;
        }

        public Builder setKubeconfig(@Nullable String kubeconfig) {
            this.kubeconfig = Input.ofNullable(kubeconfig);
            return this;
        }

        public Builder setNamespace(@Nullable Input<String> namespace) {
            this.namespace = namespace;
            return this;
        }

        public Builder setNamespace(@Nullable String namespace) {
            this.namespace = Input.ofNullable(namespace);
            return this;
        }

        public Builder setRenderYamlToDirectory(@Nullable Input<String> renderYamlToDirectory) {
            this.renderYamlToDirectory = renderYamlToDirectory;
            return this;
        }

        public Builder setRenderYamlToDirectory(@Nullable String renderYamlToDirectory) {
            this.renderYamlToDirectory = Input.ofNullable(renderYamlToDirectory);
            return this;
        }

        public Builder setSuppressDeprecationWarnings(@Nullable Input<Boolean> suppressDeprecationWarnings) {
            this.suppressDeprecationWarnings = suppressDeprecationWarnings;
            return this;
        }

        public Builder setSuppressDeprecationWarnings(@Nullable Boolean suppressDeprecationWarnings) {
            this.suppressDeprecationWarnings = Input.ofNullable(suppressDeprecationWarnings);
            return this;
        }

        public ProviderArgs build() {
            return new ProviderArgs(cluster, context, enableDryRun, kubeconfig, namespace, renderYamlToDirectory, suppressDeprecationWarnings);
        }
    }
}
