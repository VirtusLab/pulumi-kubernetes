// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core.v1.outputs;

import javax.annotation.Nullable;
import java.util.Objects;
import java.util.Optional;
import java.util.Map;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import io.pulumi.core.*;
import io.pulumi.core.internal.annotations.*;
import io.pulumi.kubernetes.Utilities;

@OutputCustomType
public final class ProjectedVolumeSource {
    private final @Nullable Integer defaultMode;
    private final List<io.pulumi.kubernetes.core.v1.outputs.VolumeProjection> sources;

    @OutputCustomType.Constructor({"defaultMode","sources"})
    private ProjectedVolumeSource(
        @Nullable Integer defaultMode,
        List<io.pulumi.kubernetes.core.v1.outputs.VolumeProjection> sources) {
        this.defaultMode = defaultMode;
        this.sources = Objects.requireNonNull(sources);
    }

    public Optional<Integer> getDefaultMode() {
        return Optional.ofNullable(this.defaultMode);
    }
    public List<io.pulumi.kubernetes.core.v1.outputs.VolumeProjection> getSources() {
        return this.sources;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProjectedVolumeSource defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer defaultMode;
        private List<io.pulumi.kubernetes.core.v1.outputs.VolumeProjection> sources;

        public Builder() {
    	      // Empty
        }

        public Builder(ProjectedVolumeSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultMode = defaults.defaultMode;
    	      this.sources = defaults.sources;
        }

        public Builder setDefaultMode(@Nullable Integer defaultMode) {
            this.defaultMode = defaultMode;
            return this;
        }

        public Builder setSources(List<io.pulumi.kubernetes.core.v1.outputs.VolumeProjection> sources) {
            this.sources = Objects.requireNonNull(sources);
            return this;
        }

        public ProjectedVolumeSource build() {
            return new ProjectedVolumeSource(defaultMode, sources);
        }
    }
}
